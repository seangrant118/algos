----------------------------------------------------------------------------------
Constant Time - O(1)

No matter how many elements you work with, the algorith will always take the same amount of time.
---------------------------------------------------------------------------------
Logarithmic Time - O(log(n))

You have this if doubling the number of elements you are iterating over does not double the amount of work. Always assume that searching operations are log(n)
---------------------------------------------------------------------------------
Linear Time - n 

Iterating through all elements in a collection of data. If you see a for loop spanning for '0' to 'array.length', you probably have 'n' or linear runtime.
---------------------------------------------------------------------------------
Quasilinear Time - n * log(n) 

You have this if doubling the number of elements you are iterating over does not double the amount of work. Always assume that any sorting operation is n * log(n)
---------------------------------------------------------------------------------
Quadratic Time - n ^ 2

Every element in a collection has to be compared to every other element. 'The handshake problem'
---------------------------------------------------------------------------------
Exponential Time - 2 ^ n

If you add a single element to a collection, the processing power required doubles.